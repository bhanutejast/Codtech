<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>E-Learning Platform</title>
    <!-- Tailwind CSS CDN for modern styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: {
              DEFAULT: '#ff7f00', // Saffron/Orange
              700: '#cc6600', // Darker shade for hover
              50: '#fffaf0', // Very light saffron tint for body background
            },
            secondary: {
              DEFAULT: '#000080', // Deep Blue
              50: '#e6e6fa', // Very light blue tint (replaces white backgrounds for cards, header, modal)
              100: '#ccccff', // Lighter blue for borders/subtle backgrounds
            },
            accent: {
              DEFAULT: '#228B22',   // Emerald Green
            },
            'light-bg': '#fffaf0', // Body background - now using primary-50 for a distinct tint
            'text-dark': '#333333',
            'text-light': '#ffffff', // Keeping white for text on dark backgrounds for contrast
            gray: { // Existing gray scale for other elements
              100: '#f3f4f6', // Slightly darker gray for main content area
              200: '#e5e5e5',
              300: '#d4d4d4',
              400: '#a3a3a3',
              500: '#737373',
              600: '#525252',
              700: '#404040',
              800: '#262626',
              900: '#171717',
            },
          },
        },
      },
    }
  </script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: theme('light-bg'); /* Applied to the entire body, now a distinct saffron tint */
            color: theme('text-dark');
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1.5rem;
            flex-grow: 1;
        }
        .nav-link {
            @apply px-4 py-2 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-200 transition-colors duration-200 ease-in-out;
        }
        .nav-link.active {
            @apply bg-primary text-text-light hover:bg-primary-700; /* Use primary-700 for active hover */
        }
        .card {
            @apply bg-secondary-50 p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200 ease-in-out flex flex-col border border-gray-200; /* Changed from bg-white to secondary-50 */
        }
        .btn-primary {
            @apply inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-text-light bg-primary hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors duration-200 ease-in-out;
        }
        .btn-secondary {
            @apply inline-flex items-center justify-center px-4 py-2 border border-secondary text-sm font-medium rounded-md text-secondary bg-secondary-50 hover:bg-secondary-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-secondary transition-colors duration-200 ease-in-out; /* Changed from bg-white to secondary-50 */
        }
        .progress-bar-container {
            @apply w-full bg-gray-200 rounded-full h-2.5;
        }
        .progress-bar-fill {
            @apply bg-accent h-2.5 rounded-full transition-all duration-500 ease-out;
        }
        .section-title {
            @apply text-2xl font-bold text-secondary mb-6 border-b-2 border-accent pb-2; /* Text color changed to secondary */
        }
        .modal {
            @apply fixed inset-0 bg-secondary bg-opacity-75 flex items-center justify-center z-50 p-4; /* Background changed to secondary with opacity */
        }
        .modal-content {
            @apply bg-secondary-50 p-8 rounded-lg shadow-xl max-w-lg w-full relative border border-gray-200; /* Changed from bg-white to secondary-50 */
        }
        .modal-close-btn {
            @apply absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-2xl font-bold;
        }
    </style>
</head>
<body>
    <header class="bg-secondary-50 shadow-md py-4 border-b-2 border-primary-100"> <!-- Changed from bg-white to secondary-50 -->
        <div class="container flex justify-between items-center">
            <a href="#" class="text-2xl font-bold text-primary" onclick="showPage('home')">EduPlatform</a>
            <nav>
                <ul class="flex space-x-4">
                    <li><a href="#" class="nav-link active" id="nav-home" onclick="showPage('home', this)">Home</a></li>
                    <li><a href="#" class="nav-link" id="nav-courses" onclick="showPage('courses', this)">Courses</a></li>
                    <li><a href="#" class="nav-link" id="nav-dashboard" onclick="showPage('dashboard', this)">Dashboard</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main class="container flex-grow py-8 bg-gray-100 rounded-lg shadow-inner"> <!-- Main content area background, now a more distinct gray-100 -->
        <section id="home-page" class="page">
            <div class="bg-secondary-50 p-8 rounded-lg shadow-md text-center border border-gray-200"> <!-- Changed from bg-white to secondary-50 -->
                <h2 class="text-4xl font-extrabold text-primary mb-4">Welcome to EduPlatform!</h2>
                <p class="text-lg text-gray-700 mb-6">Your journey to knowledge starts here. Explore our wide range of courses.</p>
                <button class="btn-primary" onclick="showPage('courses', document.getElementById('nav-courses'))">Explore Courses</button>
            </div>
        </section>

        <section id="courses-page" class="page hidden">
            <h2 class="section-title">Available Courses</h2>
            <div id="course-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                </div>
        </section>

        <section id="course-detail-page" class="page hidden">
            <button class="btn-secondary mb-6" onclick="showPage('courses', document.getElementById('nav-courses'))">&larr; Back to Courses</button>
            <div id="course-detail-content" class="bg-secondary-50 p-8 rounded-lg shadow-md border border-gray-200"> <!-- Changed from bg-white to secondary-50 -->
                </div>
        </section>

        <section id="dashboard-page" class="page hidden">
            <h2 class="section-title">Your Dashboard</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="card">
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Overall Progress</h3>
                    <div class="progress-bar-container">
                        <div id="overall-progress-bar" class="progress-bar-fill" style="width: 0%;"></div>
                    </div>
                    <p id="overall-progress-text" class="text-sm text-gray-600 mt-2 text-right">0% Complete</p>
                </div>
                <div class="card">
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Completed Courses</h3>
                    <ul id="completed-courses-list" class="list-disc list-inside text-gray-700">
                        <li class="text-gray-500">No courses completed yet.</li>
                    </ul>
                </div>
            </div>
            <div class="mt-8">
                <h3 class="section-title">In Progress Courses</h3>
                <div id="in-progress-courses-list" class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <p class="text-gray-500">No courses in progress.</p>
                </div>
            </div>
        </section>
    </main>

    <footer class="bg-gray-800 text-text-light py-6 mt-auto">
        <div class="container text-center text-sm">
            &copy; 2024 EduPlatform. All rights reserved.
        </div>
    </footer>

    <div id="message-box" class="fixed bottom-4 right-4 bg-primary text-text-light px-6 py-3 rounded-lg shadow-lg hidden" role="alert">
        <span id="message-text"></span>
    </div>

    <script>
        // Sample Data (replace with actual API calls in a real application)
        const coursesData = [
            {
                id: 'intro-web-dev',
                title: 'Introduction to Web Development',
                description: 'Learn the basics of HTML, CSS, and JavaScript to build your first websites.',
                image: 'https://placehold.co/400x250/f7b267/333333?text=Web+Dev',
                lessons: [
                    { id: 'html-basics', title: 'HTML Basics', videoUrl: 'https://www.youtube.com/embed/videoseries?list=PL4cUxeGkcC9goF_pyC_C4_s-0z2C-Jj5w' }, // Example YouTube embed URL
                    { id: 'css-fundamentals', title: 'CSS Fundamentals', videoUrl: 'https://www.youtube.com/embed/videoseries?list=PL4cUxeGkcC9gQeYBMYl_a6a0R_vP-V1_P' },
                    { id: 'js-intro', title: 'JavaScript Introduction', videoUrl: 'https://www.youtube.com/embed/videoseries?list=PL4cUxeGkcC9i5yDfead5gazsZHGzBLJZG' },
                    { id: 'responsive-design', title: 'Responsive Design', videoUrl: 'https://www.youtube.com/embed/videoseries?list=PL4cUxeGkcC9jx_gU_ck-xl_3Ig-eTfX-D' }
                ],
                progress: 0, // 0-100
                completedLessons: []
            },
            {
                id: 'python-for-beginners',
                title: 'Python for Beginners',
                description: 'Start your programming journey with Python, a versatile and powerful language.',
                image: 'https://placehold.co/400x250/034078/ffffff?text=Python+Course',
                lessons: [
                    { id: 'python-setup', title: 'Python Environment Setup', videoUrl: 'https://www.youtube.com/embed/videoseries?list=PL-osiE80TeTskfuRMMT2A5Cj3_I1qf4bY' },
                    { id: 'data-types', title: 'Data Types and Variables', videoUrl: 'https://www.youtube.com/embed/videoseries?list=PL-osiE80TeTskfuRMMT2A5Cj3_I1qf4bY' },
                    { id: 'control-flow', title: 'Control Flow (If/Else, Loops)', videoUrl: 'https://www.youtube.com/embed/videoseries?list=PL-osiE80TeTskfuRMMT2A5Cj3_I1qf4bY' },
                    { id: 'functions', title: 'Functions in Python', videoUrl: 'https://www.youtube.com/embed/videoseries?list=PL-osiE80TeTskfuRMMT2A5Cj3_I1qf4bY' }
                ],
                progress: 0,
                completedLessons: []
            },
            {
                id: 'data-science-essentials',
                title: 'Data Science Essentials',
                description: 'An introduction to data analysis, visualization, and machine learning concepts.',
                image: 'https://placehold.co/400x250/386641/ffffff?text=Data+Science',
                lessons: [
                    { id: 'intro-ds', title: 'What is Data Science?', videoUrl: 'https://www.youtube.com/embed/videoseries?list=PLD0D7B21E14B86927' },
                    { id: 'numpy-pandas', title: 'NumPy and Pandas Basics', videoUrl: 'https://www.youtube.com/embed/videoseries?list=PLD0D7B21E14B86927' },
                    { id: 'data-viz', title: 'Data Visualization with Matplotlib', videoUrl: 'https://www.youtube.com/embed/videoseries?list=PLD0D7B21E14B86927' }
                ],
                progress: 0,
                completedLessons: []
            }
        ];

        // Global state for user progress (replace with backend in real app)
        let userProgress = {}; // Stores courseId -> { progress: %, completedLessons: [] }

        // --- Utility Functions ---

        /**
         * Displays a temporary message box notification.
         * @param {string} message - The message to display.
         * @param {string} type - 'success', 'error', 'info'. Determines styling.
         */
        function showMessage(message, type = 'info') {
            const msgBox = document.getElementById('message-box');
            const msgText = document.getElementById('message-text');

            msgText.textContent = message;
            msgBox.className = `fixed bottom-4 right-4 px-6 py-3 rounded-lg shadow-lg text-text-light z-50`;

            if (type === 'success') {
                msgBox.classList.add('bg-accent');
            } else if (type === 'error') {
                msgBox.classList.add('bg-red-600');
            } else {
                msgBox.classList.add('bg-primary');
            }
            msgBox.classList.remove('hidden');

            setTimeout(() => {
                msgBox.classList.add('hidden');
                msgBox.className = `fixed bottom-4 right-4 bg-primary text-text-light px-6 py-3 rounded-lg shadow-lg hidden`; // Reset to default hidden state
            }, 3000);
        }

        /**
         * Loads user progress from local storage.
         */
        function loadUserProgress() {
            try {
                const storedProgress = localStorage.getItem('eduPlatformProgress');
                if (storedProgress) {
                    userProgress = JSON.parse(storedProgress);
                    // Ensure all courses are initialized in userProgress if not present
                    coursesData.forEach(course => {
                        if (!userProgress.hasOwnProperty(course.id)) {
                            userProgress[`${course.id}`] = { progress: 0, completedLessons: [] };
                        }
                    });
                } else {
                    // Initialize userProgress for all courses if nothing in local storage
                    coursesData.forEach(course => {
                        userProgress[`${course.id}`] = { progress: 0, completedLessons: [] };
                    });
                }
            } catch (e) {
                console.error("Error loading user progress from local storage:", e);
                userProgress = {}; // Reset in case of corrupted data
                coursesData.forEach(course => {
                    userProgress[`${course.id}`] = { progress: 0, completedLessons: [] };
                });
            }
        }

        /**
         * Saves user progress to local storage.
         */
        function saveUserProgress() {
            try {
                localStorage.setItem('eduPlatformProgress', JSON.stringify(userProgress));
            } catch (e) {
                console.error("Error saving user progress to local storage:", e);
                showMessage("Failed to save progress. Please check browser storage settings.", "error");
            }
        }

        // --- Page Rendering Functions ---

        /**
         * Shows a specific page and updates active navigation link.
         * @param {string} pageId - The ID of the page section to show (e.g., 'home', 'courses').
         * @param {HTMLElement} [clickedNavElement] - The navigation button element that was clicked.
         */
        function showPage(pageId, clickedNavElement = null) {
            // Hide all pages
            document.querySelectorAll('.page').forEach(page => {
                page.classList.add('hidden');
            });

            // Show the requested page
            document.getElementById(pageId + '-page').classList.remove('hidden');

            // Update active navigation link
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });
            if (clickedNavElement) {
                clickedNavElement.classList.add('active');
            } else {
                // Fallback to activate the correct nav link if not clicked directly
                const defaultNavLink = document.getElementById(`nav-${pageId}`);
                if (defaultNavLink) {
                    defaultNavLink.classList.add('active');
                }
            }

            // Perform specific rendering for each page
            if (pageId === 'courses') {
                renderCourses();
            } else if (pageId === 'dashboard') {
                renderDashboard();
            }
            // No specific rendering needed for 'home' on every visit
        }

        /**
         * Renders the list of courses on the courses page.
         */
        function renderCourses() {
            const courseListDiv = document.getElementById('course-list');
            courseListDiv.innerHTML = ''; // Clear previous courses

            coursesData.forEach(course => {
                const courseProgress = userProgress.hasOwnProperty(course.id) ? userProgress[`${course.id}`].progress : 0;
                const courseCard = document.createElement('div');
                courseCard.className = 'card';
                courseCard.innerHTML = `
                    <img src="${course.image}" alt="${course.title}" class="rounded-md mb-4 object-cover w-full h-40">
                    <h3 class="text-xl font-semibold text-gray-800 mb-2">${course.title}</h3>
                    <p class="text-gray-600 text-sm mb-4 flex-grow">${course.description}</p>
                    <div class="progress-bar-container mb-3">
                        <div class="progress-bar-fill" style="width: ${courseProgress}%;"></div>
                    </div>
                    <p class="text-xs text-gray-500 text-right mb-4">${courseProgress}% Complete</p>
                    <button class="btn-primary w-full" onclick="viewCourseDetail('${course.id}')">View Course</button>
                `;
                courseListDiv.appendChild(courseCard);
            });
        }

        /**
         * Renders the detailed view for a specific course.
         * @param {string} courseId - The ID of the course to display.
         */
        function viewCourseDetail(courseId) {
            const course = coursesData.find(c => c.id === courseId);
            if (!course) {
                showMessage('Course not found!', 'error');
                return;
            }

            // Ensure userProgress entry exists for this course
            if (!userProgress.hasOwnProperty(course.id)) {
                userProgress[`${course.id}`] = { progress: 0, completedLessons: [] };
            }
            const currentCourseProgress = userProgress[`${course.id}`];

            const detailContentDiv = document.getElementById('course-detail-content');
            detailContentDiv.innerHTML = `
                <h2 class="text-3xl font-bold text-primary mb-4">${course.title}</h2>
                <p class="text-gray-700 mb-6">${course.description}</p>

                <div class="progress-bar-container mb-3">
                    <div id="course-detail-progress-bar" class="progress-bar-fill" style="width: ${currentCourseProgress.progress}%;"></div>
                </div>
                <p id="course-detail-progress-text" class="text-sm text-gray-600 mt-2 text-right mb-8">${currentCourseProgress.progress}% Complete</p>

                <h3 class="section-title">Course Lessons</h3>
                <ul class="space-y-4">
                    ${course.lessons.map(lesson => `
                        <li class="bg-secondary-100 p-4 rounded-md shadow-sm flex items-center justify-between border border-secondary">
                            <div>
                                <span class="font-semibold text-gray-800">${lesson.title}</span>
                                ${currentCourseProgress.completedLessons.includes(lesson.id) ? '<span class="ml-2 text-accent text-xs font-semibold"> (Completed)</span>' : ''}
                            </div>
                            <div class="flex items-center space-x-3">
                                <button class="btn-secondary text-xs" onclick="openVideoModal('${lesson.videoUrl}', '${lesson.title}')">Watch Video</button>
                                <input type="checkbox" id="lesson-${lesson.id}"
                                    class="form-checkbox h-5 w-5 text-accent rounded"
                                    ${currentCourseProgress.completedLessons.includes(lesson.id) ? 'checked' : ''}
                                    onchange="toggleLessonCompletion('${course.id}', '${lesson.id}', this.checked)">
                            </div>
                        </li>
                    `).join('')}
                </ul>
            `;
            showPage('course-detail'); // Show the detail page
        }

        /**
         * Toggles the completion status of a lesson and updates course progress.
         * @param {string} courseId - The ID of the course.
         * @param {string} lessonId - The ID of the lesson.
         * @param {boolean} isCompleted - True if the lesson is now completed, false otherwise.
         */
        function toggleLessonCompletion(courseId, lessonId, isCompleted) {
            const course = coursesData.find(c => c.id === courseId);
            if (!course) return;

            let currentCourseProgress = userProgress[`${courseId}`];
            if (!currentCourseProgress) {
                currentCourseProgress = { progress: 0, completedLessons: [] };
                userProgress[`${course.id}`] = currentCourseProgress;
            }

            if (isCompleted && !currentCourseProgress.completedLessons.includes(lessonId)) {
                currentCourseProgress.completedLessons.push(lessonId);
                showMessage(`Lesson "${course.lessons.find(l => l.id === lessonId).title}" marked as complete!`, 'success');
            } else if (!isCompleted && currentCourseProgress.completedLessons.includes(lesson.id)) {
                currentCourseProgress.completedLessons = currentCourseProgress.completedLessons.filter(id => id !== lessonId);
                showMessage(`Lesson "${course.lessons.find(l => l.id === lessonId).title}" marked as incomplete.`, 'info');
            }

            // Recalculate progress
            currentCourseProgress.progress = (currentCourseProgress.completedLessons.length / course.lessons.length) * 100;
            currentCourseProgress.progress = parseFloat(currentCourseProgress.progress.toFixed(2)); // Round to 2 decimal places

            // Update UI
            document.getElementById('course-detail-progress-bar').style.width = `${currentCourseProgress.progress}%`;
            document.getElementById('course-detail-progress-text').textContent = `${currentCourseProgress.progress}% Complete`;

            saveUserProgress(); // Save updated progress
            renderDashboard(); // Update dashboard if currently visible
        }

        /**
         * Renders the dashboard with overall progress, completed, and in-progress courses.
         */
        function renderDashboard() {
            let totalLessons = 0;
            let totalCompletedLessons = 0;
            const completedCoursesList = document.getElementById('completed-courses-list');
            const inProgressCoursesList = document.getElementById('in-progress-courses-list');
            const overallProgressBar = document.getElementById('overall-progress-bar');
            const overallProgressText = document.getElementById('overall-progress-text');

            completedCoursesList.innerHTML = '';
            inProgressCoursesList.innerHTML = '';

            let hasCompletedCourses = false;
            let hasInProgressCourses = false;

            coursesData.forEach(course => {
                totalLessons += course.lessons.length;
                const courseProgress = userProgress.hasOwnProperty(course.id) ? userProgress[`${course.id}`] : { progress: 0, completedLessons: [] };
                totalCompletedLessons += courseProgress.completedLessons.length;

                if (courseProgress.progress === 100) {
                    hasCompletedCourses = true;
                    const listItem = document.createElement('li');
                    listItem.className = "text-gray-700 mb-1";
                    listItem.textContent = course.title;
                    completedCoursesList.appendChild(listItem);
                } else if (courseProgress.progress > 0) {
                    hasInProgressCourses = true;
                    const courseCard = document.createElement('div');
                    courseCard.className = 'card border border-gray-200';
                    courseCard.innerHTML = `
                        <h3 class="text-lg font-semibold text-gray-800 mb-2">${course.title}</h3>
                        <p class="text-gray-600 text-sm mb-3">${courseProgress.completedLessons.length} of ${course.lessons.length} lessons completed.</p>
                        <div class="progress-bar-container mb-3">
                            <div class="progress-bar-fill" style="width: ${courseProgress.progress}%;"></div>
                        </div>
                        <p class="text-xs text-gray-500 text-right mb-4">${courseProgress.progress}% Complete</p>
                        <button class="btn-primary w-full" onclick="viewCourseDetail('${course.id}')">Continue Learning</button>
                    `;
                    inProgressCoursesList.appendChild(courseCard);
                }
            });

            if (!hasCompletedCourses) {
                completedCoursesList.innerHTML = '<li class="text-gray-500">No courses completed yet.</li>';
            }
            if (!hasInProgressCourses) {
                inProgressCoursesList.innerHTML = '<p class="text-gray-500">No courses in progress.</p>';
            }

            const overallProgress = totalLessons > 0 ? (totalCompletedLessons / totalLessons) * 100 : 0;
            overallProgressBar.style.width = `${overallProgress.toFixed(2)}%`;
            overallProgressText.textContent = `${overallProgress.toFixed(2)}% Complete`;

            saveUserProgress(); // Ensure latest dashboard state is saved
        }

        // --- Video Modal Functions ---
        let videoModal = null;
        let currentVideoPlayer = null;

        /**
         * Opens a modal with the embedded video.
         * @param {string} videoUrl - The URL of the video to embed (e.g., YouTube embed URL).
         * @param {string} videoTitle - The title of the video.
         */
        function openVideoModal(videoUrl, videoTitle) {
            if (videoModal) {
                closeVideoModal(); // Close any existing modal first
            }

            videoModal = document.createElement('div');
            videoModal.className = 'modal';
            videoModal.innerHTML = `
                <div class="modal-content">
                    <button class="modal-close-btn" onclick="closeVideoModal()">×</button>
                    <h3 class="text-xl font-bold text-gray-800 mb-4">${videoTitle}</h3>
                    <div class="relative" style="padding-bottom: 56.25%; height: 0; overflow: hidden;">
                        <iframe id="video-player"
                            class="absolute top-0 left-0 w-full h-full rounded-md"
                            src="${videoUrl}?autoplay=1"
                            frameborder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                            allowfullscreen>
                        </iframe>
                    </div>
                </div>
            `;
            document.body.appendChild(videoModal);
        }

        /**
         * Closes the video modal and stops the video.
         */
        function closeVideoModal() {
            if (videoModal) {
                const iframe = videoModal.querySelector('iframe');
                if (iframe) {
                    // Stop video playback by setting src to empty or removing autoplay
                    iframe.src = "";
                }
                videoModal.remove();
                videoModal = null;
            }
        }

        // --- Initial Load ---
        document.addEventListener('DOMContentLoaded', () => {
            loadUserProgress(); // Load progress when the page loads
            showPage('home', document.getElementById('nav-home')); // Show home page by default
        });
    </script>
</body>
</html>
