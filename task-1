<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Interactive Quiz Application</title>
  <style>
    body {
      background: radial-gradient(circle at top left, #a8dadc, #457b9d, #1d3557);
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      margin: 0;
      overflow: hidden; /* Hide overflow for confetti */
    }

    .quiz-box {
      background: #fff;
      padding: 40px 30px;
      max-width: 600px;
      width: 100%;
      border-radius: 15px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.4);
      border-bottom: 8px solid #457b9d;
      position: relative; /* For confetti positioning */
    }

    h1 {
      text-align: center;
      margin-bottom: 30px;
      color: #333;
      font-size: 2.5em;
      text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
    }

    #progress {
      height: 10px;
      background: #e0e0e0;
      border-radius: 5px;
      overflow: hidden;
      margin-bottom: 20px;
    }

    #progress-bar {
      height: 100%;
      width: 0%;
      background: linear-gradient(90deg, #84d2f6, #0072ff);
      transition: width 0.4s ease;
      border-radius: 5px;
    }

    #question-info {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
      font-size: 0.95em;
      color: #555;
    }

    #timer {
      font-weight: bold;
      color: #e74c3c; /* Red for timer */
    }

    #question {
      font-size: 1.4em;
      margin-bottom: 25px;
      color: #222;
      font-weight: 500;
      line-height: 1.4;
    }

    .option {
      display: block;
      background: linear-gradient(145deg, #f0f0f0, #e0e0e0);
      border: 2px solid #ddd;
      padding: 15px;
      margin: 12px 0;
      width: 100%;
      border-radius: 8px;
      cursor: pointer;
      font-size: 1.05em;
      transition: all 0.3s ease;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      text-align: left;
      color: #333;
    }

    .option:hover:not([disabled]) {
      background: linear-gradient(145deg, #e0e0e0, #d0d0d0);
      border-color: #bbb;
      transform: translateY(-2px);
      box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }

    .option.correct {
      background: linear-gradient(145deg, #d4edda, #c3e6cb);
      border-color: #28a745;
      color: #155724;
      box-shadow: 0 4px 8px rgba(40, 167, 69, 0.2);
    }

    .option.wrong {
      background: linear-gradient(145deg, #f8d7da, #f5c6cb);
      border-color: #dc3545;
      color: #721c24;
      box-shadow: 0 4px 8px rgba(220, 53, 69, 0.2);
    }

    .option:disabled {
      cursor: not-allowed;
      opacity: 0.8;
    }

    #feedback-message {
      text-align: center;
      margin-top: 15px;
      font-size: 1.1em;
      font-weight: bold;
      min-height: 25px; /* Reserve space */
    }
    #feedback-message.correct { color: #28a745; }
    #feedback-message.wrong { color: #dc3545; }

    #next-btn, #restart-btn {
      background: linear-gradient(90deg, #007bff, #0056b3);
      color: #fff;
      padding: 12px 28px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-size: 1.1em;
      margin: 25px auto 0;
      display: block;
      transition: all 0.3s ease;
      box-shadow: 0 5px 15px rgba(0,123,255,0.3);
      font-weight: bold;
    }

    #next-btn:hover, #restart-btn:hover {
      background: linear-gradient(90deg, #0056b3, #004085);
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(0,123,255,0.4);
    }

    #next-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      box-shadow: none;
    }

    #score {
      margin-top: 30px;
      text-align: center;
      font-size: 1.2em;
      color: #333;
      font-weight: bold;
    }

    /* Confetti effect */
    .confetti-container {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      overflow: hidden;
      pointer-events: none;
      z-index: 100;
    }

    .confetti {
      position: absolute;
      width: 10px;
      height: 10px;
      background-color: #f00; /* Default color */
      opacity: 0;
      animation: fall 3s forwards;
      border-radius: 50%;
    }

    @keyframes fall {
      0% {
        transform: translate(0, -100px) rotate(0deg);
        opacity: 1;
      }
      100% {
        transform: translate(var(--x), var(--y)) rotate(var(--deg));
        opacity: 0;
      }
    }
  </style>
</head>
<body>
  <div class="quiz-box">
    <h1>Interactive Quiz</h1>
    <div id="progress"><div id="progress-bar"></div></div>
    <div id="question-info">
      <span id="question-count"></span>
      <span id="timer"></span>
    </div>
    <div id="question">Loading question...</div>
    <div id="options"></div>
    <div id="feedback-message"></div>
    <button id="next-btn">Next Question</button>
    <button id="restart-btn" style="display: none;">Restart Quiz</button>
    <div id="score"></div>
  </div>
  <div id="confetti-container" class="confetti-container"></div>

  <script>
    const questions = [
      {
        question: "Which planet is known as the Red Planet?",
        options: ["Earth", "Mars", "Jupiter", "Venus"],
        answer: "Mars"
      },
      {
        question: "What is the largest ocean on Earth?",
        options: ["Atlantic Ocean", "Indian Ocean", "Pacific Ocean", "Arctic Ocean"],
        answer: "Pacific Ocean"
      },
      {
        question: "Who wrote 'Romeo and Juliet'?",
        options: ["Charles Dickens", "William Shakespeare", "Jane Austen", "Mark Twain"],
        answer: "William Shakespeare"
      },
      {
        question: "What is the chemical symbol for Gold?",
        options: ["Au", "Ag", "Gd", "Go"],
        answer: "Au"
      },
      {
        question: "How many continents are there on Earth?",
        options: ["5", "6", "7", "8"],
        answer: "7"
      },
      {
        question: "What is the capital of France?",
        options: ["Berlin", "Madrid", "Paris", "Rome"],
        answer: "Paris"
      },
      {
        question: "Which gas do plants absorb from the atmosphere?",
        options: ["Oxygen", "Nitrogen", "Carbon Dioxide", "Hydrogen"],
        answer: "Carbon Dioxide"
      },
      {
        question: "What is the smallest country in the world?",
        options: ["Monaco", "Vatican City", "San Marino", "Liechtenstein"],
        answer: "Vatican City"
      },
      {
        question: "What is the hardest natural substance on Earth?",
        options: ["Gold", "Iron", "Diamond", "Quartz"],
        answer: "Diamond"
      },
      {
        question: "Which animal is known as the 'Ship of the Desert'?",
        options: ["Camel", "Horse", "Donkey", "Elephant"],
        answer: "Camel"
      }
    ];

    const TIME_PER_QUESTION = 15; // seconds

    let currentIndex = 0;
    let score = 0;
    let correctAnswers = 0;
    let incorrectAnswers = 0;
    let timerInterval;
    let timeLeft;

    const questionEl = document.getElementById('question');
    const optionsEl = document.getElementById('options');
    const nextBtn = document.getElementById('next-btn');
    const restartBtn = document.getElementById('restart-btn');
    const scoreEl = document.getElementById('score');
    const progressBar = document.getElementById('progress-bar');
    const questionCountEl = document.getElementById('question-count');
    const timerEl = document.getElementById('timer');
    const feedbackMessageEl = document.getElementById('feedback-message');
    const confettiContainer = document.getElementById('confetti-container');

    function startTimer() {
      timeLeft = TIME_PER_QUESTION;
      timerEl.textContent = `Time: ${timeLeft}s`;
      clearInterval(timerInterval); // Clear any existing timer
      timerInterval = setInterval(() => {
        timeLeft--;
        timerEl.textContent = `Time: ${timeLeft}s`;
        if (timeLeft <= 5) {
          timerEl.style.color = '#e74c3c'; // Red for low time
        } else {
          timerEl.style.color = '#457b9d'; // Default color
        }

        if (timeLeft <= 0) {
          clearInterval(timerInterval);
          // Auto-select a wrong answer or just mark as incorrect
          const currentQuestion = questions[currentIndex];
          const buttons = document.querySelectorAll('.option');
          let selectedBtn = null;
          // Try to find a non-correct button to highlight as wrong
          for (let i = 0; i < buttons.length; i++) {
            if (buttons[i].textContent !== currentQuestion.answer) {
              selectedBtn = buttons[i];
              break;
            }
          }
          // If all are correct (shouldn't happen in a real quiz), just pick first
          if (!selectedBtn && buttons.length > 0) {
            selectedBtn = buttons[0];
          }
          
          if (selectedBtn) {
            checkAnswer(selectedBtn, currentQuestion.answer, true); // Pass true for timed out
          } else {
            // Fallback if no options or weird scenario
            incorrectAnswers++;
            feedbackMessageEl.textContent = "Time's up!";
            feedbackMessageEl.className = 'wrong';
            nextBtn.style.display = "block";
            nextBtn.disabled = false;
            disableOptions();
            updateScoreDisplay();
          }
        }
      }, 1000);
    }

    function loadQuestion() {
      feedbackMessageEl.textContent = ""; // Clear previous feedback
      feedbackMessageEl.className = ""; // Reset feedback class

      const current = questions[currentIndex];
      questionEl.textContent = current.question;
      optionsEl.innerHTML = "";
      current.options.forEach(option => {
        const btn = document.createElement('button');
        btn.className = 'option';
        btn.textContent = option;
        btn.onclick = () => checkAnswer(btn, current.answer);
        optionsEl.appendChild(btn);
      });
      nextBtn.style.display = "none";
      nextBtn.disabled = true; // Disable next button until answer is selected
      restartBtn.style.display = "none"; // Hide restart button
      updateProgress();
      updateQuestionCount();
      startTimer();
      timerEl.style.color = '#457b9d'; // Reset timer color
    }

    function disableOptions() {
      document.querySelectorAll('.option').forEach(btn => {
        btn.disabled = true;
      });
    }

    function checkAnswer(selectedBtn, correct, timedOut = false) {
      clearInterval(timerInterval); // Stop the timer
      disableOptions(); // Disable all options after selection

      if (selectedBtn.textContent === correct && !timedOut) {
        selectedBtn.classList.add('correct');
        score++;
        correctAnswers++;
        feedbackMessageEl.textContent = "Correct!";
        feedbackMessageEl.className = 'correct';
      } else {
        if (!timedOut) {
          selectedBtn.classList.add('wrong');
          feedbackMessageEl.textContent = `Incorrect. The answer was: ${correct}`;
          feedbackMessageEl.className = 'wrong';
        } else {
          feedbackMessageEl.textContent = `Time's up! The answer was: ${correct}`;
          feedbackMessageEl.className = 'wrong';
        }
        incorrectAnswers++;
        // Highlight the correct answer
        document.querySelectorAll('.option').forEach(btn => {
          if (btn.textContent === correct) btn.classList.add('correct');
        });
      }

      updateScoreDisplay();
      nextBtn.style.display = "block";
      nextBtn.disabled = false; // Enable next button
    }

    nextBtn.onclick = () => {
      currentIndex++;
      if (currentIndex < questions.length) {
        loadQuestion();
      } else {
        showResult();
      }
    };

    restartBtn.onclick = () => {
      currentIndex = 0;
      score = 0;
      correctAnswers = 0;
      incorrectAnswers = 0;
      scoreEl.textContent = ""; // Clear score display
      confettiContainer.innerHTML = ""; // Clear confetti
      loadQuestion();
    };

    function updateProgress() {
      const progress = ((currentIndex) / questions.length) * 100;
      progressBar.style.width = `${progress}%`;
    }

    function updateQuestionCount() {
      questionCountEl.textContent = `Question ${currentIndex + 1} of ${questions.length}`;
    }

    function updateScoreDisplay() {
      scoreEl.textContent = `Score: ${score} / ${questions.length}`;
    }

    function showResult() {
      clearInterval(timerInterval); // Ensure timer is stopped
      questionEl.textContent = "Quiz Completed!";
      optionsEl.innerHTML = "";
      nextBtn.style.display = "none";
      restartBtn.style.display = "block"; // Show restart button
      progressBar.style.width = '100%';
      feedbackMessageEl.textContent = ""; // Clear feedback
      
      scoreEl.innerHTML = `
        <strong>Your final score: ${score} / ${questions.length}</strong><br>
        Correct Answers: ${correctAnswers}<br>
        Incorrect Answers: ${incorrectAnswers}
      `;

      if (score === questions.length) {
        triggerConfetti();
        scoreEl.innerHTML += "<br>🎉 Perfect Score! Congratulations! 🎉";
      }
    }

    function triggerConfetti() {
      const colors = ['#f00', '#0f0', '#00f', '#ff0', '#0ff', '#f0f'];
      for (let i = 0; i < 100; i++) {
        const confetti = document.createElement('div');
        confetti.className = 'confetti';
        confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
        confetti.style.left = `${Math.random() * 100}%`;
        confetti.style.setProperty('--x', `${(Math.random() - 0.5) * 500}px`);
        confetti.style.setProperty('--y', `${window.innerHeight + Math.random() * 200}px`);
        confetti.style.setProperty('--deg', `${Math.random() * 720}deg`);
        confettiContainer.appendChild(confetti);

        // Remove confetti after animation to prevent DOM bloat
        confetti.addEventListener('animationend', () => {
          confetti.remove();
        });
      }
    }

    // Initial load
    loadQuestion();
  </script>
</body>
</html>
