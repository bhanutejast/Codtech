import React, { useState, useEffect, useRef, useCallback } from 'react';

// Main App component to handle routing between Login and ChatRoom
const App = () => {
  const [username, setUsername] = useState('');
  const [currentPage, setCurrentPage] = useState('login'); // 'login' or 'chat'

  // Function to handle login
  const handleLogin = (user) => {
    if (user.trim()) {
      setUsername(user);
      setCurrentPage('chat');
    } else {
      alert('Please enter a username!'); // Using alert for simple validation feedback
    }
  };

  // Function to handle logout (go back to login page)
  const handleLogout = () => {
    setUsername('');
    setCurrentPage('login');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center p-4">
      {currentPage === 'login' ? (
        <Login onLogin={handleLogin} />
      ) : (
        <ChatRoom username={username} onLogout={handleLogout} />
      )}
    </div>
  );
};

// Login component
const Login = ({ onLogin }) => {
  const [inputUsername, setInputUsername] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    onLogin(inputUsername);
  };

  return (
    <div className="bg-white p-8 rounded-xl shadow-2xl w-full max-w-md transform transition-all duration-300 hover:scale-105">
      <h2 className="text-3xl font-extrabold text-gray-800 mb-6 text-center">Join Chat</h2>
      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label htmlFor="username" className="block text-sm font-medium text-gray-700 mb-2">
            Enter your username
          </label>
          <input
            type="text"
            id="username"
            value={inputUsername}
            onChange={(e) => setInputUsername(e.target.value)}
            className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            placeholder="e.g., ChatMaster"
            required
          />
        </div>
        <button
          type="submit"
          className="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-lg font-semibold text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
        >
          Enter Chat
        </button>
      </form>
    </div>
  );
};

// ChatRoom component
const ChatRoom = ({ username, onLogout }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [socket, setSocket] = useState(null);
  const messagesEndRef = useRef(null); // Ref for scrolling to bottom
  const [isConnected, setIsConnected] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState('Connecting...');

  // WebSocket connection effect
  useEffect(() => {
    const ws = new WebSocket('wss://echo.websocket.events'); // Public echo WebSocket server

    ws.onopen = () => {
      console.log('WebSocket Connected');
      setIsConnected(true);
      setConnectionStatus('Connected');
      // Send a welcome message from the user
      const welcomeMessage = {
        user: 'System',
        text: `${username} has joined the chat.`,
        timestamp: Date.now(),
      };
      setMessages((prevMessages) => [...prevMessages, welcomeMessage]);
    };

    ws.onmessage = (event) => {
      try {
        const receivedData = JSON.parse(event.data);
        // Only add messages that are not from the system itself (to avoid double system messages from echo)
        // Or if it's an echo of our own message, ensure it's handled correctly
        if (receivedData.user === 'System' && receivedData.text.includes(username)) {
            // This is our own system join message echoed back, ignore it as we already added it
            return;
        }
        setMessages((prevMessages) => [...prevMessages, receivedData]);
      } catch (error) {
        console.error('Failed to parse message:', event.data, error);
        // Handle non-JSON messages if necessary, e.g., just display as plain text
        setMessages((prevMessages) => [...prevMessages, { user: 'Server', text: event.data, timestamp: Date.now() }]);
      }
    };

    ws.onclose = () => {
      console.log('WebSocket Disconnected');
      setIsConnected(false);
      setConnectionStatus('Disconnected');
      setMessages((prevMessages) => [
        ...prevMessages,
        { user: 'System', text: 'You have been disconnected from the chat.', timestamp: Date.now() },
      ]);
    };

    ws.onerror = (error) => {
      console.error('WebSocket Error:', error);
      setConnectionStatus('Error');
      setMessages((prevMessages) => [
        ...prevMessages,
        { user: 'System', text: 'WebSocket error occurred. Attempting to reconnect...', timestamp: Date.now() },
      ]);
      // Potentially add reconnection logic here
    };

    setSocket(ws);

    // Cleanup function: close WebSocket when component unmounts
    return () => {
      if (ws.readyState === WebSocket.OPEN) {
        ws.close();
      }
    };
  }, [username]); // Reconnect if username changes (though it shouldn't in this flow)

  // Scroll to bottom whenever messages update
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Function to send a message
  const sendMessage = useCallback(() => {
    if (socket && socket.readyState === WebSocket.OPEN && newMessage.trim()) {
      const message = {
        user: username,
        text: newMessage.trim(),
        timestamp: Date.now(),
      };
      socket.send(JSON.stringify(message));
      setNewMessage(''); // Clear input field

      // For echo server, we immediately add our own message to history
      // In a real chat app, you'd wait for the server to broadcast it back
      setMessages((prevMessages) => [...prevMessages, message]);
    } else if (!newMessage.trim()) {
      // Using a simple alert for user feedback
      alert('Message cannot be empty!');
    } else if (socket && socket.readyState !== WebSocket.OPEN) {
      alert(`Not connected to chat. Status: ${connectionStatus}. Please try again later.`);
    }
  }, [socket, newMessage, username, connectionStatus]);

  // Handle Enter key to send message
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) { // Shift+Enter for new line
      e.preventDefault(); // Prevent default new line behavior
      sendMessage();
    }
  };

  // Helper to format timestamp
  const formatTimestamp = (timestamp) => {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  return (
    <div className="bg-white p-6 rounded-xl shadow-2xl w-full max-w-2xl flex flex-col h-[80vh] min-h-[500px]">
      <div className="flex justify-between items-center mb-4 pb-4 border-b border-gray-200">
        <h2 className="text-2xl font-bold text-gray-800">
          Chat Room <span className={`text-sm ml-2 ${isConnected ? 'text-green-500' : 'text-red-500'}`}>({connectionStatus})</span>
        </h2>
        <button
          onClick={onLogout}
          className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors duration-200 text-sm"
        >
          Logout
        </button>
      </div>

      <div className="flex-grow overflow-y-auto pr-2 mb-4 space-y-3 custom-scrollbar">
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`flex ${msg.user === username ? 'justify-end' : 'justify-start'}`}
          >
            <div
              className={`max-w-[70%] p-3 rounded-lg shadow-md ${
                msg.user === username
                  ? 'bg-blue-500 text-white rounded-br-none'
                  : msg.user === 'System'
                  ? 'bg-gray-200 text-gray-700 text-sm italic rounded-md'
                  : 'bg-gray-100 text-gray-800 rounded-bl-none'
              }`}
            >
              <div className="font-semibold text-sm mb-1">
                {msg.user === username ? 'You' : msg.user}
              </div>
              <p className="break-words">{msg.text}</p>
              <div className="text-xs text-right mt-1 opacity-75">
                {formatTimestamp(msg.timestamp)}
              </div>
            </div>
          </div>
        ))}
        <div ref={messagesEndRef} /> {/* Element to scroll into view */}
      </div>

      <div className="flex items-center space-x-3">
        <textarea
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          onKeyPress={handleKeyPress}
          className="flex-grow p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 resize-none h-12 overflow-hidden"
          placeholder="Type your message..."
          rows="1" // Start with one row
          onInput={(e) => { // Auto-resize textarea
            e.target.style.height = 'auto';
            e.target.style.height = (e.target.scrollHeight) + 'px';
          }}
        />
        <button
          onClick={sendMessage}
          disabled={!isConnected}
          className={`px-6 py-3 rounded-lg text-white font-semibold transition-colors duration-200 ${
            isConnected ? 'bg-blue-600 hover:bg-blue-700' : 'bg-gray-400 cursor-not-allowed'
          }`}
        >
          Send
        </button>
      </div>
    </div>
  );
};

export default App;

